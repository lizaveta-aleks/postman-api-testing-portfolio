{
	"info": {
		"_postman_id": "c2ea97bb-e340-4f40-b753-27a41fc04a2c",
		"name": "JSONPlaceholder API Testing",
		"description": "**Тестирование эндпоинтов /posts для JSONPlaceholder**\n\n**Цель коллекции:**  \nЭта коллекция предназначена для демонстрации навыков тестирования REST API. Она включает в себя набор тестов для проверки базовых CRUD-операций (Create, Read, Update, Delete) для ресурса /posts сервиса JSONPlaceholder.\n\n**Область тестирования:**  \nКоллекция покрывает следующие сценарии:\n\n- GET /posts - Получение списка всех постов.\n    \n- GET /posts/{id} - Получение одного поста по его ID.\n    \n- POST /posts - Создание нового поста.\n    \n- PUT /posts/{id} - Полное обновление существующего поста.\n    \n- DELETE /posts/{id} - Удаление поста.\n    \n\nКаждый запрос содержит автотесты на JavaScript для проверки статус-кода и ключевых полей в теле ответа.\n\n**Необходимые настройки:**  \nДля корректной работы коллекции необходимо выбрать окружение \"JSONPlaceholder Env\", в котором должна быть задана переменная baseUrl: [https://jsonplaceholder.typicode.com](https://www.google.com/url?sa=E&q=https%3A%2F%2Fjsonplaceholder.typicode.com)\n\n**Как запустить:**  \nДля комплексной проверки всех запросов и их тестов рекомендуется использовать Collection Runner.\n\nEndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38725925"
	},
	"item": [
		{
			"name": "[GET] All Posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверка, что статус-код ответа - 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка, что тело ответа - это массив\r",
							"pm.test(\"Response body is an array\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Проверка, что в массиве есть элементы (он не пустой)\r",
							"pm.test(\"Response array is not empty\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.not.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "[GET] Single Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверка, что статус-код ответа - 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка, что в ответе есть ключ \"userId\"\r",
							"pm.test(\"Response body has 'userId' property\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.have.property('userId');\r",
							"});\r",
							"\r",
							"// Проверка, что значение id в ответе равно 1\r",
							"pm.test(\"Post ID is 1\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.id).to.eql(1);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "[POST] Create Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверка, что статус-код - 201 Created (стандарт для POST)\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Проверка, что заголовок созданного поста совпадает с отправленным\r",
							"pm.test(\"Title is correct\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.title).to.eql(\"My New Post Title\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"My New Post Title\",\r\n    \"body\": \"This is the body of my new post.\",\r\n    \"userId\": 101\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "[PUT] Update Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверка, что статус-код - 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка, что заголовок обновлен\r",
							"pm.test(\"Title was updated\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.title).to.eql(\"Updated Title\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"title\": \"Updated Title\",\r\n    \"body\": \"This content has been completely updated.\",\r\n    \"userId\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "[DELETE] Delete Post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверка, что статус-код - 200 OK\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка, что тело ответа пустое\r",
							"pm.test(\"Response body is empty\", function () {\r",
							"    // Ответ от JSONPlaceholder для DELETE - это пустой объект {}\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.be.an('object').that.is.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/posts/1",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		}
	]
}